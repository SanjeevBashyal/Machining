# Generated from Sql.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,8,69,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,1,0,1,0,4,0,20,8,0,11,0,12,0,21,1,1,1,1,4,1,26,8,1,
        11,1,12,1,27,1,2,1,2,4,2,32,8,2,11,2,12,2,33,1,3,1,3,5,3,38,8,3,
        10,3,12,3,41,9,3,1,4,4,4,44,8,4,11,4,12,4,45,1,5,1,5,5,5,50,8,5,
        10,5,12,5,53,9,5,1,5,1,5,1,6,1,6,5,6,59,8,6,10,6,12,6,62,9,6,1,6,
        1,6,1,7,1,7,1,7,1,7,0,0,8,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,1,0,
        6,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        2,0,10,10,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,75,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,1,17,1,0,0,0,3,23,1,0,0,0,5,29,1,0,0,0,
        7,35,1,0,0,0,9,43,1,0,0,0,11,47,1,0,0,0,13,56,1,0,0,0,15,65,1,0,
        0,0,17,19,5,79,0,0,18,20,7,0,0,0,19,18,1,0,0,0,20,21,1,0,0,0,21,
        19,1,0,0,0,21,22,1,0,0,0,22,2,1,0,0,0,23,25,5,78,0,0,24,26,7,0,0,
        0,25,24,1,0,0,0,26,27,1,0,0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,4,1,
        0,0,0,29,31,5,71,0,0,30,32,7,0,0,0,31,30,1,0,0,0,32,33,1,0,0,0,33,
        31,1,0,0,0,33,34,1,0,0,0,34,6,1,0,0,0,35,39,7,1,0,0,36,38,7,2,0,
        0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,8,1,
        0,0,0,41,39,1,0,0,0,42,44,7,0,0,0,43,42,1,0,0,0,44,45,1,0,0,0,45,
        43,1,0,0,0,45,46,1,0,0,0,46,10,1,0,0,0,47,51,5,34,0,0,48,50,8,3,
        0,0,49,48,1,0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,54,
        1,0,0,0,53,51,1,0,0,0,54,55,5,34,0,0,55,12,1,0,0,0,56,60,5,40,0,
        0,57,59,8,4,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,
        1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,5,41,0,0,64,14,1,0,0,0,
        65,66,7,5,0,0,66,67,1,0,0,0,67,68,6,7,0,0,68,16,1,0,0,0,8,0,21,27,
        33,39,45,51,60,1,0,1,0
    ]

class SqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OID = 1
    NID = 2
    GID = 3
    ID = 4
    INT = 5
    STRING = 6
    COMMENT = 7
    WS = 8

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "OID", "NID", "GID", "ID", "INT", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "OID", "NID", "GID", "ID", "INT", "STRING", "COMMENT", 
                  "WS" ]

    grammarFileName = "Sql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


